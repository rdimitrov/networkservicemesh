---
version: 2.1

jobs:
  sanity-check:
    resource_class: medium+
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
            ./.circleci/install-shellcheck.sh
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run: go version
      - run:
          name: Download Go Dependencies
          command: |
            ./scripts/go-mod-download.sh
      - run: "! go fmt ./... 2>&1 | read"
      - run:
          name: golint
          command: |
            go get golang.org/x/lint/golint
            golint ./...
      - run: ./scripts/prepare-generate.sh
      - run: sudo ./scripts/install-protoc.sh
      - run: go generate ./...
      - run: make vet check
      - run: go build ./...
      - run: mkdir -p ~/junit/
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            export CONTAINER_FORCE_PULL="true"
            gotestsum --junitfile ~/junit/unit-tests.xml -- -short `go list ./... | grep -v networkservicemesh/test/`
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
    environment:
      GO111MODULE: "on"

  packet-deploy:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run: pwd
      - run: ls
      - run: wget https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
      - run: unzip terraform_0.11.13_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: mkdir terraform
      - run: ssh-keygen -t rsa -f terraform/sshkey -q -N ""
      - run: ssh-add terraform/sshkey
      - run: .circleci/provision.sh
      - run: cp -a scripts/terraform/ terraform/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - /go/bin/terraform
            - terraform

  packet-deploy-k8s:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run: mkdir terraform
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: ssh-add terraform/sshkey
      - run: cp -a terraform/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: cd scripts/terraform && ./create-kubernetes-cluster.sh && cd ../..
      - run: make packet-get-kubeconfig
      - run:
          name: "Prepare cache data<< parameters.cluster_id >>"
          command: |
            mkdir -p data
            cp kubeconfig data/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: cncf-data-packet-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"

  integration-tests:
    parameters:
      cloud_provider:
        type: string
      cluster_id:
        type: string
      test_tags:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
      use_ipv6:
        type: string
        default: "false"
      namespace:
        type: string
        default: "default"
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          name: Cache Prep
          command: |
            mkdir terraform
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/ || true
      - run: ssh-add /home/circleci/project/terraform/sshkey || true
      - restore_cache:
          key: cncf-data-<< parameters.cloud_provider >>-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: cp /home/circleci/project/terraform/sshkey* /cncf/data || true
      - run:
          name: Downloading go deps
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            # export CONTAINER_FORCE_PULL="true"
            ./scripts/install-kubectl.sh
            cat /home/circleci/project/data/kubeconfig
            ./scripts/prepare-circle-integration-tests.sh
            mkdir -p ~/junit/
            ./scripts/go-mod-download.sh
          no_output_timeout: 40m
      - run:
          name: Running integration tests - <<parameters.test_tags>>
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            gotestsum --junitfile ~/junit/integration-tests-basic.xml -f standard-verbose ./test/... -timeout 30m -failfast -tags="<<parameters.test_tags>>"
          no_output_timeout: 40m
      - run:
          when: always
          name: Save postmortem data
          command: |
            make << parameters.cloud_provider >>-download-postmortem
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - store_artifacts:
          path: ~/postmortem
      - run:
          when: always
          name: Dump K8s state
          command: |
            kubectl get nodes
            kubectl get pods -o wide
            kubectl describe pods
      - run:
          when: on_fail
          command: |
            if [ "x<< parameters.cloud_provider >>" == "xgke" ]; then
              .circleci/gke/cleanup-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}" "dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"
            else
              .circleci/cleanup-<< parameters.cloud_provider >>.sh
            fi
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"
      CLUSTER_ID: "<< parameters.cluster_id >>"
      CLOUD_PROVIDER: "<< parameters.cloud_provider >>"
      USE_IPV6: "<< parameters.use_ipv6 >>"
      KUBECONFIG: /home/circleci/project/data/kubeconfig
      GO111MODULE: "on"
      NSM_NAMESPACE: "<< parameters.namespace >>"

  packet-destroy:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: .circleci/destroy-cluster.sh

  azure-deploy:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install Azure Prerequisites
          command: |
            ./scripts/azure/install-azure-cli.sh
            az login --service-principal --username ${AZURE_SERVICE_PRINCIPAL} --password ${AZURE_SERVICE_PRINCIPAL_SECRET} --tenant ${CIRCLE_AZURE_TENANT}
      - run:
          name: Create AKS Cluster
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-start
          environment:
            AZURE_CREDENTIALS_PATH: "data/kubeconfig"
      - save_cache:
          key: cncf-data-azure-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
      - run:
          when: on_fail
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-destroy

  azure-destroy:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install Azure Prerequisites
          command: |
            ./scripts/azure/install-azure-cli.sh
            az login --service-principal --username ${AZURE_SERVICE_PRINCIPAL} --password ${AZURE_SERVICE_PRINCIPAL_SECRET} --tenant ${CIRCLE_AZURE_TENANT}
      - run:
          name: Destroy AKS Cluster
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-destroy

  build-container:
    parameters:
      container:
        type: string
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export TAG="${COMMIT}"
            make docker-<< parameters.container >>-build
            make docker-<< parameters.container >>-push

  docker-push-latest:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export PULL_TAG="${COMMIT}"
            export TAG="latest"
            export REPO="networkservicemesh"
            export CONTAINERS=(nsmd nsmd-k8s nsmdp crossconnect-monitor icmp-responder-nse vppagent-icmp-responder-nse vppagent-nsc nsc vppagent-dataplane vppagent-dataplane-dev admission-webhook)
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
            for c in ${CONTAINERS[@]}; do
              docker pull ${REPO}/${c}:${PULL_TAG}
              docker tag ${REPO}/${c}:${PULL_TAG} ${REPO}/${c}:${TAG}
              docker push ${REPO}/${c}:${TAG}
            done
  license-scan:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install fossa
          command: |
            curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash
      - run:
          name: Go mod Download
          command: |
            ./scripts/go-mod-download.sh
      - run:
          name: Go build
          command: |
            go build ./...
      - run:
          name: Performan License License Scan
          command: |
            fossa init
            fossa
            fossa test
    environment:
      GO111MODULE: "on"

  gke-create-cluster:
    parameters:
      cluster_id:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Setup Google Kubernetes Cluster
          command: |
            .circleci/gke/init-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}"
            export GKE_CLUSTER_NAME="dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"
            make gke-start
      - run:
          name: "Prepare cache data << parameters.cluster_id >>"
          command: |
            mkdir -p data
            cp ~/.kube/config data/kubeconfig
            cat data/kubeconfig
      - run:
          when: on_fail
          command: sudo .circleci/gke/cleanup-gke.sh
      - save_cache:
          key: cncf-data-gke-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
  gke-destroy-cluster:
    parameters:
      cluster_id:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: "Install google cloud SDK"
          command: |
            .circleci/gke/cleanup-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}" "dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"
  helm-chart-tests:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: quay.io/helmpack/chart-testing:v2.3.0
    steps:
      - checkout
      - run:
          name: Install and lint Helm charts
          command: |
            .circleci/helm/test-charts.sh
workflows:
  version: 2
  build-and-test:
    jobs:
      - sanity-check
      - license-scan
      - build-container:
          name: "build-nsmd"
          container: "nsmd"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsmd-k8s"
          container: "nsmd-k8s"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsmdp"
          container: "nsmdp"
          requires:
            - sanity-check
      - build-container:
          name: "build-admission-webhook"
          container: "admission-webhook"
          requires:
            - sanity-check
      - build-container:
          name: "build-crossconnect-monitor"
          container: "crossconnect-monitor"
          requires:
            - sanity-check
      - build-container:
          name: "build-icmp-responder-nse"
          container: "icmp-responder-nse"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-icmp-responder-nse"
          container: "vppagent-icmp-responder-nse"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-nsc"
          container: "vppagent-nsc"
          requires:
            - sanity-check
      - build-container:
          name: "build-nsc"
          container: "nsc"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-dataplane"
          container: "vppagent-dataplane"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-dataplane-dev"
          container: "vppagent-dataplane-dev"
          requires:
            - sanity-check
      - build-container:
          name: "build-vppagent-firewall-nse"
          container: "vppagent-firewall-nse"
          requires:
            - sanity-check
      - packet-deploy:
          requires:
            - sanity-check
      - packet-deploy-k8s:
          name: "packet-deploy-k8s-1"
          cluster_id: "1"
          requires:
            - packet-deploy
      - packet-deploy-k8s:
          name: "packet-deploy-k8s-2"
          cluster_id: "2"
          requires:
            - packet-deploy
      - integration-tests:
          name: "packet-test-basic-usecase"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "1"
          test_tags: "basic usecase"
          requires:
            - packet-deploy-k8s-1
      - integration-tests:
          name: "packet-test-recover"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "2"
          test_tags: "recover"
          requires:
            - packet-deploy-k8s-2
      - integration-tests:
          name: "packet-test-basic-usecase-ipv6"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "1"
          test_tags: "basic usecase"
          use_ipv6: "true"
          requires:
            - packet-deploy-k8s-1
      - integration-tests:
          name: "packet-test-recover-ipv6"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "2"
          test_tags: "recover"
          use_ipv6: "true"
          requires:
            - packet-deploy-k8s-2
      - integration-tests:
          name: "packet-test-bench"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "2"
          test_tags: "bench"
          requires:
            - "packet-test-recover"
      - integration-tests:
          name: "azure-test-basic-usecase"
          cloud_provider: "azure"
          cluster_id: "1"
          test_tags: "basic usecase azure"
          requires:
            - azure-deploy-k8s-1
      - integration-tests:
          name: "azure-test-recover"
          cloud_provider: "azure"
          cluster_id: "2"
          test_tags: "recover azure"
          requires:
            - azure-deploy-k8s-2
      - packet-destroy:
          requires:
            - "packet-test-basic-usecase"
            - "packet-test-recover"
            - "packet-test-bench"
      - docker-push-latest:
          requires:
            - packet-destroy
            - azure-destroy-1
            - azure-destroy-2
          filters:
            branches:
              only: master
      - gke-create-cluster:
          cluster_id: "1"
          name: "gke-cluster1"
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-admission-webhook
            - build-crossconnect-monitor
            - build-icmp-responder-nse
            - build-vppagent-icmp-responder-nse
            - build-vppagent-nsc
            - build-nsc
            - build-vppagent-dataplane
            - build-vppagent-dataplane-dev
            - build-vppagent-firewall-nse
      - integration-tests:
          name: "gke test basic usecase"
          cloud_provider: "gke"
          cluster_id: "1"
          test_tags: "basic usecase gke"
          requires:
            - "gke-cluster1"
      - gke-destroy-cluster:
          name: "gke-destroy-cluster1"
          cluster_id: "1"
          requires:
            - "gke-cluster1"
            - "gke test basic usecase"
      - gke-create-cluster:
          cluster_id: "2"
          name: "gke-cluster2"
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-admission-webhook
            - build-crossconnect-monitor
            - build-icmp-responder-nse
            - build-vppagent-icmp-responder-nse
            - build-vppagent-nsc
            - build-nsc
            - build-vppagent-dataplane
            - build-vppagent-dataplane-dev
            - build-vppagent-firewall-nse
      - integration-tests:
          name: "gke test recover"
          cloud_provider: "gke"
          cluster_id: "2"
          test_tags: "recover gke"
          requires:
            - "gke-cluster2"
      - gke-destroy-cluster:
          name: "gke-destroy-cluster2"
          cluster_id: "2"
          requires:
            - "gke-cluster2"
            - "gke test recover"
      - helm-chart-tests:
          name: "helm-chart-tests"
          requires:
            - sanity-check
      - azure-deploy:
          name: "azure-deploy-k8s-1"
          cluster_id: "1"
          requires:
            - sanity-check
      - azure-deploy:
          name: "azure-deploy-k8s-2"
          cluster_id: "2"
          requires:
            - sanity-check
      - azure-destroy:
          name: "azure-destroy-1"
          cluster_id: "1"
          requires:
            - azure-test-basic-usecase
      - azure-destroy:
          name: "azure-destroy-2"
          cluster_id: "2"
          requires:
            - azure-test-recover
